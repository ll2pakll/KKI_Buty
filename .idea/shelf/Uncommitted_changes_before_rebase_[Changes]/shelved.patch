Index: menus/collection.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from menus.pyqt_files.collection.collection import *\r\nfrom Help_Fn.functions import *\r\nimport Global.variables as gv\r\nfrom PyQt5.QtWidgets import QDesktopWidget\r\nimport functools\r\n\r\n\r\nclass Collection_widget(Ui_Collection):\r\n    def __init__(self, MainWindow, stacked_widget_general=None, stack_dict_general=None):\r\n        super(Collection_widget, self).__init__()\r\n        self.setupUi(MainWindow)\r\n\r\n        '''делаем основное окно общедоступным для всего класса'''\r\n        self.Collection = MainWindow\r\n\r\n        '''создаём экземлпяры служебных классов'''\r\n        self.Files = Files()\r\n\r\n        '''задаём отображаемый размер изображений'''\r\n        self.img_size = QDesktopWidget().width()//10\r\n\r\n        \"\"\"если нет файла с коллекцией игрока, он создаётся\"\"\"\r\n        if not os.path.isfile(gv.path_collection):\r\n            pickle_save(dict(), gv.path_collection)\r\n\r\n        '''открываем коллекцию и сортируем её по имени'''\r\n        with open(gv.path_collection, 'rb') as f:\r\n            self.collection = pickle.load(f)\r\n        self.collection_list = list()\r\n        for k, i in self.collection.items():\r\n            self.collection_list.append(k)\r\n        self.collection_list = sorted(self.collection_list)\r\n\r\n        \"\"\"если нет файла с колодами игрока, он создаётся\"\"\"\r\n        if not os.path.isfile(gv.path_decks):\r\n            pickle_save(dict(), gv.path_decks)\r\n\r\n        '''список кнопок в коллеции'''\r\n        self.buttons_collection = [None] * len(self.collection_list)\r\n\r\n        \"\"\"открываем файл с колодами\"\"\"\r\n        with open(gv.path_decks, 'rb') as f:\r\n            self.decks = pickle.load(f)\r\n\r\n        \"\"\"определяем размер колоды\"\"\"\r\n        self.deck_len = 6\r\n\r\n        '''список кнопок в колоде'''\r\n        self.buttons_deck = [None] * self.deck_len\r\n\r\n        '''список выбранных карт, сюда помещаются пути к изображениям для \r\n        кнопок колоды '''\r\n        self.buttons_deck_path_list_empty = [None]*self.deck_len\r\n        self.buttons_deck_path_list = self.buttons_deck_path_list_empty.copy()\r\n\r\n        '''определяем скорость прокрутки коллекции колёсиком мышки'''\r\n        self.scrollArea.verticalScrollBar().setSingleStep(self.img_size // 7)\r\n\r\n        '''задаём размер окна ориентируясь на разрешение экрана'''\r\n        self.Collection.resize(int(QDesktopWidget().screenGeometry().width() * 0.9),\r\n                               int(QDesktopWidget().screenGeometry().height() * 0.89))\r\n\r\n        '''задаём размер поля в котором будут отображаться карты из коллекции'''\r\n        self.scrollAreaWidgetContents_2.setMinimumSize(\r\n            QtCore.QSize(int(self.img_size * 4 * 1.1), (len(self.collection_list) // 4)\r\n                         * int(self.img_size * 1.1) + self.img_size))\r\n\r\n        '''функции'''\r\n        self.pbtn_collection_creater()\r\n        self.pbtn_deck_creater()\r\n        self.add_connects()\r\n        self.location_on_the_screen()\r\n\r\n\r\n    def location_on_the_screen(self):\r\n        '''Это функция которая позволяет позиционировать окно при запуске'''\r\n        sg = QDesktopWidget().screenGeometry()\r\n        widget = self.Collection.geometry()\r\n\r\n        x = (sg.width() - widget.width())//2\r\n        y = 0\r\n        self.Collection.move(x, y)\r\n\r\n    def add_connects(self):\r\n        '''связь сигналов'''\r\n        self.clear_deck.clicked.connect(self.on_click)\r\n        self.save_deck.clicked.connect(self.on_click)\r\n\r\n    def on_click(self, sours=None, data=None):\r\n        '''инструкция при нажатии сюда посылаем источник откуда пришёл сигнал\r\n            и информацию сигнала'''\r\n        if sours == 'collection':\r\n            path = self.buttons_collection[data][1]\r\n            if path not in self.buttons_deck_path_list:\r\n                try:\r\n                    index = self.buttons_deck_path_list.index(None)\r\n                    self.icon.addPixmap(QtGui.QPixmap(path).scaled(self.img_size // 2, self.img_size // 2),\r\n                                        QtGui.QIcon.Normal,\r\n                                        QtGui.QIcon.On)\r\n                    self.buttons_deck_path_list[index] = path\r\n                    self.buttons_deck[index].setIcon(self.icon)\r\n                    self.buttons_deck[index].setIconSize(QtCore.QSize(self.img_size//2, self.img_size//2))\r\n                except:\r\n                    pass\r\n\r\n        elif sours == 'deck':\r\n            self.buttons_deck[data].setIcon(QtGui.QIcon())\r\n            self.buttons_deck_path_list[data] = None\r\n\r\n        elif self.Collection.sender().objectName() == \"clear_deck\":\r\n            self.buttons_deck_path_list = [None] * 6\r\n            for i in self.buttons_deck:\r\n                i.setIcon(QtGui.QIcon())\r\n\r\n        elif self.Collection.sender().objectName() == \"save_deck\":\r\n            deck_empty = self.buttons_deck_path_list == self.buttons_deck_path_list_empty\r\n            deck_name_text_empty = self.deck_name.text() == ''\r\n            def deck_saved():\r\n                pickle_save(self.decks, gv.path_decks)\r\n                QtWidgets.QMessageBox.information(self.Collection, 'Колода сохранена',\r\n                                                  f'Колода сохранена под именем \"{self.deck_name.text()}\"')\r\n            if deck_empty:\r\n                QtWidgets.QMessageBox.warning(self.Collection, 'Внимание', 'Колода пуста. Наполните её прежде чем сохранять')\r\n            elif deck_name_text_empty:\r\n                QtWidgets.QMessageBox.critical(self.Collection, 'Внимание', 'Назовите колоду, иначе она не сохранится!')\r\n            elif None in self.buttons_deck_path_list:\r\n                QtWidgets.QMessageBox.warning(self.Collection, 'Внимание', 'Колода не полная. '\r\n                                                'Пока вы её не наполните вы не сможете с ней играть')\r\n            if not deck_empty and not deck_name_text_empty and self.deck_name.text() not in self.decks.keys():\r\n                self.decks[self.deck_name.text()] = self.buttons_deck_path_list\r\n                deck_saved()\r\n            elif not deck_empty and not deck_name_text_empty and self.deck_name.text() in self.decks.keys():\r\n                if QtWidgets.QMessageBox.question(self.Collection, 'Такая колода уже есть',\r\n                                                  f'Колода с именем \"{self.deck_name.text()}\" уже существует, '\r\n                                                  f'вы хотите перезаписать её?') == 16384:\r\n                    pickle_save(self.decks, gv.path_decks)\r\n                    deck_saved()\r\n\r\n    def pbtn_collection_creater(self):\r\n        '''Создание кнопок с изображениями из коллекции'''\r\n        '''создаём экземляр класса изображения'''\r\n        self.icon = QtGui.QIcon()\r\n        '''создаём общую политику размеров для кнопок'''\r\n        self.sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)\r\n        self.sizePolicy.setHorizontalStretch(0)\r\n        self.sizePolicy.setVerticalStretch(0)\r\n        self.sizePolicy.setHeightForWidth(self.pushButton_1.sizePolicy().hasHeightForWidth())\r\n        for i in range(len(self.collection_list)):\r\n            self.pushButton = QtWidgets.QPushButton(self.gridWidget)\r\n            self.pushButton.setObjectName(\"pushButton\" + str(i))\r\n            self.pushButton.setSizePolicy(self.sizePolicy)\r\n            self.pushButton.setMinimumSize(QtCore.QSize(self.img_size, self.img_size))\r\n            if __name__ == \"__main__\":\r\n                path = \"../../Global_collection/DataFaces/\" + self.collection_list[i]\r\n            else:\r\n                path = \"../Global_collection/DataFaces/\" + self.collection_list[i]\r\n            self.icon.addPixmap(QtGui.QPixmap(path).scaled(self.img_size, self.img_size),\r\n                                QtGui.QIcon.Normal,\r\n                                QtGui.QIcon.On)\r\n            self.pushButton.setIcon(self.icon)\r\n            self.pushButton.setIconSize(QtCore.QSize(self.img_size, self.img_size))\r\n            self.gridLayout_3.addWidget(self.pushButton, i // 4, i % 4, 1, 1)\r\n            self.buttons_collection[i] = (self.pushButton, path)\r\n\r\n            '''создаём привязку нажатия к функции нажатия, посылаем индекс из списка\r\n            кнопок коллекции'''\r\n            self.buttons_collection[i][0].clicked.connect(self.on_click_lambda('collection', i))\r\n\r\n    def pbtn_deck_creater(self):\r\n        '''Создание иконок карт выбранных для игры'''\r\n        for i in range(self.deck_len):\r\n            self.pushButton = QtWidgets.QPushButton(self.centralwidget)\r\n            self.pushButton.setObjectName(\"pushButton_deck\" + str(i))\r\n            self.pushButton.setSizePolicy(self.sizePolicy)\r\n            self.pushButton.setMinimumSize(QtCore.QSize(self.img_size // 2, self.img_size // 2))\r\n            self.QVB_deck_layout.addWidget(self.pushButton)\r\n            self.buttons_deck[i] = self.pushButton\r\n            self.buttons_deck[i].clicked.connect(self.on_click_lambda('deck', i))\r\n\r\n        \"\"\"создаём в этом же лейауте кнопку для сохранения\"\"\"\r\n        self.save_deck = QtWidgets.QPushButton()\r\n        self.save_deck.setObjectName(\"save_deck\")\r\n        self.save_deck.setText('Save')\r\n        self.QVB_deck_layout.addWidget(self.save_deck)\r\n\r\n        \"\"\"добавляем в коно ввода имени колоды подсказку для пользователя\"\"\"\r\n        self.deck_name.setPlaceholderText('Введи имя колоды')\r\n\r\n    def on_click_lambda(self, x, y):\r\n        '''создаём \"замыкание\" для того что бы лямбда правильно работала'''\r\n        return lambda: self.on_click(x, y)\r\n\r\nif __name__ == \"__main__\":\r\n    os.chdir(os.path.abspath(os.path.join(os.path.dirname(__file__))))\r\n    app = QtWidgets.QApplication(sys.argv)\r\n    MainWindow = QtWidgets.QMainWindow()\r\n    ui = Collection_widget(MainWindow)\r\n    MainWindow.show()\r\n    sys.exit(app.exec_())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/menus/collection.py b/menus/collection.py
--- a/menus/collection.py	(revision e950892b21dc2e7be10a2bde715c1f1f3bb2943e)
+++ b/menus/collection.py	(date 1658637441133)
@@ -49,7 +49,7 @@
         self.buttons_deck = [None] * self.deck_len
 
         '''список выбранных карт, сюда помещаются пути к изображениям для 
-        кнопок колоды '''
+        кнопок колоды'''
         self.buttons_deck_path_list_empty = [None]*self.deck_len
         self.buttons_deck_path_list = self.buttons_deck_path_list_empty.copy()
 
